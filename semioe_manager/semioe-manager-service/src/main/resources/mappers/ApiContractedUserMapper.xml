<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.semioe.dubbo.dao.ApiContractedUserMapper">
  <resultMap id="BaseResultMap" type="com.semioe.api.entity.ApiContractedUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="manager_id" jdbcType="VARCHAR" property="managerId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="card_id" jdbcType="VARCHAR" property="cardId" />
    <result column="birthday" jdbcType="DATE" property="birthday" />
    <result column="contact_people" jdbcType="VARCHAR" property="contactPeople" />
    <result column="contact_mobile" jdbcType="VARCHAR" property="contactMobile" />
    <result column="resident_type" jdbcType="INTEGER" property="residentType" />
    <result column="permanent_address" jdbcType="VARCHAR" property="permanentAddress" />
    <result column="nation" jdbcType="INTEGER" property="nation" />
    <result column="marital_status" jdbcType="INTEGER" property="maritalStatus" />
    <result column="cultural_status" jdbcType="INTEGER" property="culturalStatus" />
    <result column="occupation" jdbcType="INTEGER" property="occupation" />
    <result column="work_unit" jdbcType="VARCHAR" property="workUnit" />
    <result column="present_address" jdbcType="VARCHAR" property="presentAddress" />
    <result column="medical_type" jdbcType="INTEGER" property="medicalType" />
    <result column="bloody" jdbcType="INTEGER" property="bloody" />
    <result column="rh" jdbcType="INTEGER" property="rh" />
    <result column="expiration_date" jdbcType="TIMESTAMP" property="expirationDate" />
    <result column="years" jdbcType="INTEGER" property="years" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="in_use" jdbcType="INTEGER" property="inUse" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, manager_id, name, sex, card_id, birthday, contact_people, contact_mobile, resident_type, 
    permanent_address, nation, marital_status, cultural_status, occupation, work_unit, 
    present_address, medical_type, bloody, rh, expiration_date, years, 
    create_time, update_time, in_use
  </sql>
  <select id="selectByExample" parameterType="com.semioe.api.entity.ApiContractedUserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_contracted_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from api_contracted_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from api_contracted_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.semioe.api.entity.ApiContractedUserExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from api_contracted_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.semioe.api.entity.ApiContractedUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_contracted_user (manager_id, name, sex, 
      card_id, birthday, contact_people, 
      contact_mobile, resident_type, permanent_address, 
      nation, marital_status, cultural_status, 
      occupation, work_unit, present_address, 
      medical_type, bloody, rh, 
      expiration_date, years, 
      create_time, update_time, in_use
      )
    values (#{managerId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{cardId,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{contactPeople,jdbcType=VARCHAR}, 
      #{contactMobile,jdbcType=VARCHAR}, #{residentType,jdbcType=INTEGER}, #{permanentAddress,jdbcType=VARCHAR}, 
      #{nation,jdbcType=INTEGER}, #{maritalStatus,jdbcType=INTEGER}, #{culturalStatus,jdbcType=INTEGER}, 
      #{occupation,jdbcType=INTEGER}, #{workUnit,jdbcType=VARCHAR}, #{presentAddress,jdbcType=VARCHAR}, 
      #{medicalType,jdbcType=INTEGER}, #{bloody,jdbcType=INTEGER}, #{rh,jdbcType=INTEGER}, 
      #{expirationDate,jdbcType=TIMESTAMP}, #{years,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{inUse,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.semioe.api.entity.ApiContractedUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_contracted_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="managerId != null">
        manager_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="cardId != null">
        card_id,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="contactPeople != null">
        contact_people,
      </if>
      <if test="contactMobile != null">
        contact_mobile,
      </if>
      <if test="residentType != null">
        resident_type,
      </if>
      <if test="permanentAddress != null">
        permanent_address,
      </if>
      <if test="nation != null">
        nation,
      </if>
      <if test="maritalStatus != null">
        marital_status,
      </if>
      <if test="culturalStatus != null">
        cultural_status,
      </if>
      <if test="occupation != null">
        occupation,
      </if>
      <if test="workUnit != null">
        work_unit,
      </if>
      <if test="presentAddress != null">
        present_address,
      </if>
      <if test="medicalType != null">
        medical_type,
      </if>
      <if test="bloody != null">
        bloody,
      </if>
      <if test="rh != null">
        rh,
      </if>
      <if test="expirationDate != null">
        expiration_date,
      </if>
      <if test="years != null">
        years,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="inUse != null">
        in_use,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="managerId != null">
        #{managerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="cardId != null">
        #{cardId,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="contactPeople != null">
        #{contactPeople,jdbcType=VARCHAR},
      </if>
      <if test="contactMobile != null">
        #{contactMobile,jdbcType=VARCHAR},
      </if>
      <if test="residentType != null">
        #{residentType,jdbcType=INTEGER},
      </if>
      <if test="permanentAddress != null">
        #{permanentAddress,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        #{nation,jdbcType=INTEGER},
      </if>
      <if test="maritalStatus != null">
        #{maritalStatus,jdbcType=INTEGER},
      </if>
      <if test="culturalStatus != null">
        #{culturalStatus,jdbcType=INTEGER},
      </if>
      <if test="occupation != null">
        #{occupation,jdbcType=INTEGER},
      </if>
      <if test="workUnit != null">
        #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="presentAddress != null">
        #{presentAddress,jdbcType=VARCHAR},
      </if>
      <if test="medicalType != null">
        #{medicalType,jdbcType=INTEGER},
      </if>
      <if test="bloody != null">
        #{bloody,jdbcType=INTEGER},
      </if>
      <if test="rh != null">
        #{rh,jdbcType=INTEGER},
      </if>
      <if test="expirationDate != null">
        #{expirationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="years != null">
        #{years,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        #{inUse,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.semioe.api.entity.ApiContractedUserExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from api_contracted_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update api_contracted_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.managerId != null">
        manager_id = #{record.managerId,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.cardId != null">
        card_id = #{record.cardId,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.contactPeople != null">
        contact_people = #{record.contactPeople,jdbcType=VARCHAR},
      </if>
      <if test="record.contactMobile != null">
        contact_mobile = #{record.contactMobile,jdbcType=VARCHAR},
      </if>
      <if test="record.residentType != null">
        resident_type = #{record.residentType,jdbcType=INTEGER},
      </if>
      <if test="record.permanentAddress != null">
        permanent_address = #{record.permanentAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.nation != null">
        nation = #{record.nation,jdbcType=INTEGER},
      </if>
      <if test="record.maritalStatus != null">
        marital_status = #{record.maritalStatus,jdbcType=INTEGER},
      </if>
      <if test="record.culturalStatus != null">
        cultural_status = #{record.culturalStatus,jdbcType=INTEGER},
      </if>
      <if test="record.occupation != null">
        occupation = #{record.occupation,jdbcType=INTEGER},
      </if>
      <if test="record.workUnit != null">
        work_unit = #{record.workUnit,jdbcType=VARCHAR},
      </if>
      <if test="record.presentAddress != null">
        present_address = #{record.presentAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.medicalType != null">
        medical_type = #{record.medicalType,jdbcType=INTEGER},
      </if>
      <if test="record.bloody != null">
        bloody = #{record.bloody,jdbcType=INTEGER},
      </if>
      <if test="record.rh != null">
        rh = #{record.rh,jdbcType=INTEGER},
      </if>
      <if test="record.expirationDate != null">
        expiration_date = #{record.expirationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.years != null">
        years = #{record.years,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inUse != null">
        in_use = #{record.inUse,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update api_contracted_user
    set id = #{record.id,jdbcType=INTEGER},
      manager_id = #{record.managerId,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      card_id = #{record.cardId,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=DATE},
      contact_people = #{record.contactPeople,jdbcType=VARCHAR},
      contact_mobile = #{record.contactMobile,jdbcType=VARCHAR},
      resident_type = #{record.residentType,jdbcType=INTEGER},
      permanent_address = #{record.permanentAddress,jdbcType=VARCHAR},
      nation = #{record.nation,jdbcType=INTEGER},
      marital_status = #{record.maritalStatus,jdbcType=INTEGER},
      cultural_status = #{record.culturalStatus,jdbcType=INTEGER},
      occupation = #{record.occupation,jdbcType=INTEGER},
      work_unit = #{record.workUnit,jdbcType=VARCHAR},
      present_address = #{record.presentAddress,jdbcType=VARCHAR},
      medical_type = #{record.medicalType,jdbcType=INTEGER},
      bloody = #{record.bloody,jdbcType=INTEGER},
      rh = #{record.rh,jdbcType=INTEGER},
      expiration_date = #{record.expirationDate,jdbcType=TIMESTAMP},
      years = #{record.years,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      in_use = #{record.inUse,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.semioe.api.entity.ApiContractedUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update api_contracted_user
    <set>
      <if test="managerId != null">
        manager_id = #{managerId,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="cardId != null">
        card_id = #{cardId,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="contactPeople != null">
        contact_people = #{contactPeople,jdbcType=VARCHAR},
      </if>
      <if test="contactMobile != null">
        contact_mobile = #{contactMobile,jdbcType=VARCHAR},
      </if>
      <if test="residentType != null">
        resident_type = #{residentType,jdbcType=INTEGER},
      </if>
      <if test="permanentAddress != null">
        permanent_address = #{permanentAddress,jdbcType=VARCHAR},
      </if>
      <if test="nation != null">
        nation = #{nation,jdbcType=INTEGER},
      </if>
      <if test="maritalStatus != null">
        marital_status = #{maritalStatus,jdbcType=INTEGER},
      </if>
      <if test="culturalStatus != null">
        cultural_status = #{culturalStatus,jdbcType=INTEGER},
      </if>
      <if test="occupation != null">
        occupation = #{occupation,jdbcType=INTEGER},
      </if>
      <if test="workUnit != null">
        work_unit = #{workUnit,jdbcType=VARCHAR},
      </if>
      <if test="presentAddress != null">
        present_address = #{presentAddress,jdbcType=VARCHAR},
      </if>
      <if test="medicalType != null">
        medical_type = #{medicalType,jdbcType=INTEGER},
      </if>
      <if test="bloody != null">
        bloody = #{bloody,jdbcType=INTEGER},
      </if>
      <if test="rh != null">
        rh = #{rh,jdbcType=INTEGER},
      </if>
      <if test="expirationDate != null">
        expiration_date = #{expirationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="years != null">
        years = #{years,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        in_use = #{inUse,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.semioe.api.entity.ApiContractedUser">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update api_contracted_user
    set manager_id = #{managerId,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      card_id = #{cardId,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      contact_people = #{contactPeople,jdbcType=VARCHAR},
      contact_mobile = #{contactMobile,jdbcType=VARCHAR},
      resident_type = #{residentType,jdbcType=INTEGER},
      permanent_address = #{permanentAddress,jdbcType=VARCHAR},
      nation = #{nation,jdbcType=INTEGER},
      marital_status = #{maritalStatus,jdbcType=INTEGER},
      cultural_status = #{culturalStatus,jdbcType=INTEGER},
      occupation = #{occupation,jdbcType=INTEGER},
      work_unit = #{workUnit,jdbcType=VARCHAR},
      present_address = #{presentAddress,jdbcType=VARCHAR},
      medical_type = #{medicalType,jdbcType=INTEGER},
      bloody = #{bloody,jdbcType=INTEGER},
      rh = #{rh,jdbcType=INTEGER},
      expiration_date = #{expirationDate,jdbcType=TIMESTAMP},
      years = #{years,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      in_use = #{inUse,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectByObject" parameterType="com.semioe.api.entity.ApiContractedUser" resultType="com.semioe.api.vo.ApiContractedUserVO">
     select 
     c.id, c.manager_id as managerId, c.name, c.sex, card_id as cardId, c.birthday,
      contact_people as contactPeople,
     contact_mobile as contactMobile, resident_type as residentType,  
    permanent_address as permanentAddress, nation, marital_status as maritalStatus,
     cultural_status as culturalStatus, occupation, work_unit as workUnit, 
    present_address as presentAddress, medical_type as medicalType, 
    bloody, rh, c.expiration_date as expirationDate, years, 
    c.create_time as createTime, c.update_time as updateTime, c.in_use as inUse,u.mobile as mobile,
	b.name as doctorName,r.doctor_id as doctorId
    from user_doctor_rel r 
	left join api_contracted_user c on r.contracted_user_id = c.id
    left join api_user_info u on r.manager_id = u.manager_id
	left join backstage_user_info b on r.doctor_id = b.manager_id
    where r.in_use=1 and r.build_type=1
    <if test="id !=null">
       and  r.contracted_user_id = #{id,jdbcType=INTEGER}
    </if> 
    <if test="managerId !=null and managerId !=''">
       and  r.manager_id = #{managerId,jdbcType=VARCHAR}
    </if>
  </select>
   <insert id="insertUserVO" useGeneratedKeys="true" keyProperty="id" parameterType="com.semioe.api.vo.ApiContractedUserVO">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_contracted_user (manager_id, name, sex, 
      card_id, birthday, contact_people, 
      contact_mobile, resident_type, permanent_address, 
      nation, marital_status, cultural_status, 
      occupation, work_unit, present_address, 
      medical_type, bloody, rh, 
      expiration_date, years, 
      create_time, update_time, in_use
      )
    values (#{managerId,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, 
      #{cardId,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{contactPeople,jdbcType=VARCHAR}, 
      #{contactMobile,jdbcType=VARCHAR}, #{residentType,jdbcType=INTEGER}, #{permanentAddress,jdbcType=VARCHAR}, 
      #{nation,jdbcType=INTEGER}, #{maritalStatus,jdbcType=INTEGER}, #{culturalStatus,jdbcType=INTEGER}, 
      #{occupation,jdbcType=INTEGER}, #{workUnit,jdbcType=VARCHAR}, #{presentAddress,jdbcType=VARCHAR}, 
      #{medicalType,jdbcType=INTEGER}, #{bloody,jdbcType=INTEGER}, #{rh,jdbcType=INTEGER}, 
      #{expirationDate,jdbcType=TIMESTAMP}, #{years,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{inUse,jdbcType=INTEGER}
      )
  </insert>
  
<!--签约用户 性别统计 天 月   -->
  <select id="selectAllBySex"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
  resultType="com.semioe.api.vo.UserCountVO">
	SELECT da.count_date AS countDate,
	GROUP_CONCAT(da.sex, ":", da.count_number) AS sexs FROM(
		SELECT u.count_date,u.sex,SUM(u.count_number) AS count_number
		FROM
		(
			<if test="buildType ==0 or buildType ==1">
				SELECT 
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
				WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
				au.sex,SUM(1) AS count_number
				FROM user_doctor_rel r
				LEFT JOIN api_contracted_user au ON r.`contracted_user_id` = au.`id` 
				WHERE  
				r.in_use=1
				<if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				</if>
				<if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate}, '%Y-%m')
				</if>
				<if test="managerId !=null and managerId !=''">
	      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   			</if>
				AND r.`build_type`= 1
				GROUP BY count_date,au.sex
			</if>
			<if test="buildType ==0">
				UNION ALL
			</if>
			<if test="buildType ==0 or buildType==3">
				SELECT 	
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
				WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
				2 AS sex,SUM(1) AS count_number
				FROM user_doctor_rel r
				WHERE r.in_use=1
				<if test="displayType !=null and displayType!='' and displayType==1">
					and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
					and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				</if>
				<if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate}, '%Y-%m')
				</if>
				<if test="managerId !=null and managerId!=''">
	      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   			</if>
				AND r.`build_type`= 3
				GROUP BY count_date
			</if>
		)u GROUP BY u.count_date,u.sex
	)da
	GROUP BY
	da.count_date
  </select>
  <!-- 签约用户性别汇总 -->
   <select id="selectAllBySexSummary"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
  resultType="com.semioe.api.vo.UserCountVO">
	SELECT GROUP_CONCAT(da.sex, ":", da.count_number) AS sexs FROM(
		SELECT u.sex,SUM(u.count_number) AS count_number
		FROM
		(
			<if test="buildType ==0 or buildType==1">
				SELECT 
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
				WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
				au.sex,SUM(1) AS count_number
				FROM user_doctor_rel r
				LEFT JOIN api_contracted_user au ON r.`contracted_user_id` = au.`id` 
				WHERE  
				r.in_use=1
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				<if test="managerId !=null and managerId!=''">
	      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   			</if>
				AND r.`build_type`= 1
				GROUP BY count_date,au.sex
			</if>
			<if test="buildType ==0">
				UNION ALL
			</if>
			<if test="buildType ==0 or buildType==3">
				SELECT 	
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
				WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
				2 AS sex,SUM(1) AS count_number
				FROM user_doctor_rel r
				WHERE r.in_use=1
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				<if test="managerId !=null and managerId!=''">
	      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   			</if>
				AND r.`build_type`= 3
				GROUP BY count_date
			</if>
		)u GROUP BY u.sex
	)da
  </select>
  <!-- 年龄统计  天  月 -->
    <select id="selectAllByAge"  parameterType="com.semioe.api.vo.ApiUserInfoVO"
     resultType="com.semioe.api.vo.UserCountVO">
	SELECT u.count_date AS countDate, GROUP_CONCAT(u.age) AS ages
	FROM
	(
		<if test="buildType ==0 or buildType==1">
			SELECT CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
				WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
		     IFNULL((YEAR(NOW())-YEAR(u.birthday)-1) + ( DATE_FORMAT(u.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d') ),-1) AS age  
			FROM  user_doctor_rel r 
			LEFT JOIN api_contracted_user u ON r.contracted_user_id =u.id
			WHERE  r.in_use=1
			<if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			</if>
			<if test="displayType !=null and displayType!='' and displayType==2">
				and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
				and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			</if>
				and r.build_type=1 
			<if test="managerId !=null and managerId!=''">
	      		and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   		</if> 
   		</if>
   		<if test="buildType ==0">
			UNION ALL
		</if>
		<if test="buildType ==0 or buildType==3">
			SELECT CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
			WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
		   	am.age AS age  
			FROM  user_doctor_rel r 
			LEFT JOIN api_motherhood_user am ON r.contracted_user_id =am.id
			WHERE  r.in_use=1
			<if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			</if>
			<if test="displayType !=null and displayType!='' and displayType==2">
				and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
				and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			</if>
				and r.build_type=3
			<if test="managerId !=null and managerId!=''">
	      		and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   		</if> 
   		</if>
	)u
	GROUP BY
	 u.count_date ORDER BY u.count_date 
  </select>
  <!-- 年龄统计  汇总 -->
  <select id="selectAllByAgeSummary"  parameterType="com.semioe.api.vo.ApiUserInfoVO"
     resultType="com.semioe.api.vo.UserCountVO">
	SELECT GROUP_CONCAT(u.age) AS ages
	FROM
	(
		<if test="buildType ==0 or buildType==1">
			SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
		     IFNULL((YEAR(NOW())-YEAR(u.birthday)-1) + ( DATE_FORMAT(u.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d') ),-1) AS age  
			FROM  user_doctor_rel r 
			LEFT JOIN api_contracted_user u ON r.contracted_user_id =u.id
			WHERE  r.in_use=1
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				and r.build_type=1 
			<if test="managerId !=null and managerId!=''">
	      		and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   		</if> 
   		</if>
   		<if test="buildType ==0">
			UNION ALL
		</if>
		<if test="buildType ==0 or buildType==3">
			SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
		   	am.age AS age  
			FROM  user_doctor_rel r 
			LEFT JOIN api_motherhood_user am ON r.contracted_user_id =am.id
			WHERE  r.in_use=1
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				and r.build_type=3
			<if test="managerId !=null and managerId!=''">
	      		and r.doctor_id = #{managerId,jdbcType=VARCHAR}
	   		</if> 
   		</if>
	)u
  </select>
  <!-- 疾病统计  天 月 -->
  <select id="selectAllByDisease"  parameterType="com.semioe.api.vo.ApiUserInfoVO"  resultType="com.semioe.api.vo.UserCountVO">
	
	SELECT d2.count_date as countDate,
		 GROUP_CONCAT(d2.item_id, ":", d2.nums) AS dieases
		FROM(
	 SELECT d1.count_date,
	d1.item_id,count(1) as nums
	FROM(
	select 
		CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
		WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
		IF (h.item_id IS NULL,'0',IF (h.item_id = '', '0', h.item_id)) as item_id,u.id,1 as count_number
			from  user_doctor_rel r
			LEFT JOIN api_contracted_user u on r.contracted_user_id = u.id
			left join user_healthy_living h on r.contracted_user_id = h.contracted_user_id
			 where  r.in_use=1  and h.type_id=3
			<if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			</if>
			<if test="displayType !=null and displayType!='' and displayType==2">
				and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
				and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			</if>
			 and r.build_type=1 
			 <if test="managerId !=null and managerId!=''">
      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
   			</if> 
		group by count_date,item_id,id
		) d1
		GROUP BY
		 d1.count_date,d1.item_id
	)d2 group by d2.count_date
  </select>
  <!-- 疾病统计  汇总   -->
  <select id="selectAllByDiseaseSummary"  parameterType="com.semioe.api.vo.ApiUserInfoVO"  resultType="com.semioe.api.vo.UserCountVO">
	SELECT  GROUP_CONCAT(d2.item_id, ":", d2.nums) AS dieases
		FROM(
			SELECT d1.item_id,COUNT(1) AS nums
			FROM(
				SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
				IF (h.item_id IS NULL,'0',IF (h.item_id = '', '0', h.item_id)) as item_id,u.id,1 as count_number
					from  user_doctor_rel r
					LEFT JOIN api_contracted_user u on r.contracted_user_id = u.id
					left join user_healthy_living h on r.contracted_user_id = h.contracted_user_id
					where  r.in_use=1  and h.type_id=3
						and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
						and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
					 	and r.build_type=1 
					 <if test="managerId !=null and managerId!=''">
		      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
		   			</if> 
				GROUP BY count_date,item_id,id
			) d1
			GROUP BY d1.item_id
	)d2
  </select>
  
 <!-- 用户管理  机构 医生通用 -->
  <select id="getAllUserByConditionListPage" parameterType="com.semioe.api.vo.ApiContractedUserVO" resultType="com.semioe.api.vo.ApiContractedUserVO">
   SELECT d4.* FROM (	
		SELECT d3.* FROM (
			<if test="buildType != null">
				<if test="buildType==1 or buildType==0">
		   			SELECT d1.*,b2.name AS doctorName,ro.`item_name` AS roleName,
					b1.`name` AS parentName,b1.mobile AS parentMobile
					,GROUP_CONCAT(uh.`item_id`) AS diseaseIds
					FROM (
						SELECT u.id AS contractedId,
						r.manager_id AS managerId,
						u.`name` NAME,
						a.mobile AS mobile,r.doctor_id AS doctorId,
						r.in_use AS inUse,
						IF (u.sex IS NULL,a.sex,u.sex) AS sex,
						r.create_time AS createTime,
						r.build_type AS buildType,
						IFNULL((YEAR(NOW())-YEAR(u.birthday)-1) + ( DATE_FORMAT(u.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d')),-1) AS age,
						a.`parent_id` AS parentId,
						a.`role_id` AS roleId
						FROM user_doctor_rel r
						LEFT JOIN api_contracted_user u ON r.contracted_user_id = u.id
						LEFT JOIN api_user_info a ON r.manager_id = a.manager_id
						WHERE r.`build_type` =1
					)d1 
					LEFT JOIN api_user_info b1 ON d1.parentId = b1.`manager_id`
					LEFT JOIN backstage_user_info b2 ON d1.doctorId = b2.manager_id
					LEFT JOIN api_role_info ro ON d1.roleId = ro.`id`
					LEFT JOIN user_healthy_living uh ON d1.contractedId = uh.`contracted_user_id`
					WHERE 1=1 
					<if test="diseaseId != null and diseaseId !=''">
			       		AND uh.`type_id`='3'
				    </if> 
				     <if test="ageBegin != null and ageBegin !=''">
			       		and d1.age &gt;= #{ageBegin,jdbcType=INTEGER}
				    </if>
				    <if test="ageEnd != null and ageEnd !=''">
				        and d1.age &lt;= #{ageEnd,jdbcType=INTEGER}
				    </if>
					 GROUP BY d1.contractedId
				 </if>
			</if>
			<if test="buildType != null and buildType==0">
				UNION
			</if>
			<if test="buildType != null">
				<if test="buildType==3 or buildType==0">
					SELECT d1.*,bu.name AS doctorName,ar.`item_name` AS roleName,
					au.`name` AS parentName,au.mobile AS parentMobile
					,NULL AS diseaseIds FROM (
						SELECT r.`contracted_user_id` AS contractedId,r.`manager_id` AS managerId,u.`name` AS NAME
						,a.`mobile` AS mobile,r.`doctor_id` AS doctorId,r.`in_use` AS in_use,a.`sex` AS sex,
						r.`create_time` AS createTime,r.`build_type` AS buildType,u.`age`,a.`parent_id` AS parentId,a.`role_id` AS roleId
						FROM user_doctor_rel r
						LEFT JOIN api_motherhood_user u ON r.`contracted_user_id` = u.`id`
						LEFT JOIN api_user_info a ON r.`manager_id` = a.`manager_id`
						WHERE r.`build_type` =3
					)d1
					LEFT JOIN api_user_info au ON d1.parentId = au.`manager_id`
					LEFT JOIN backstage_user_info bu ON d1.doctorId = bu.`manager_id`
					LEFT JOIN api_role_info ar ON d1.roleId = ar.`id`
					  <if test="ageBegin != null and ageBegin !=''">
			       		and d1.age &gt;= #{ageBegin,jdbcType=INTEGER}
				    </if>
				    <if test="ageEnd != null and ageEnd !=''">
				        and d1.age &lt;= #{ageEnd,jdbcType=INTEGER}
				    </if>
				 </if>
			 </if>
   			<if test="(ageBegin == null or ageBegin =='' or ageBegin=='-1')
   				and (diseaseId ==null or diseaseId=='') 
   				and (buildType ==null or buildType=='' or buildType==0)">
   				UNION
		   			SELECT d1.*,b2.name AS doctorName,ro.`item_name` AS roleName,
					b1.`name` AS parentName,b1.mobile AS parentMobile,null AS diseaseIds
					FROM (
						SELECT u.id AS contractedId,
						r.manager_id AS managerId,
						u.`name` NAME,
						a.mobile AS mobile,r.doctor_id AS doctorId,
						r.in_use AS inUse,
						IF (u.sex IS NULL,a.sex,u.sex) AS sex,
						r.create_time AS createTime,
						r.build_type AS buildType,
						IFNULL((YEAR(NOW())-YEAR(a.birthday)-1) + ( DATE_FORMAT(a.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d')),-1) AS age,
						a.`parent_id` AS parentId,
						a.`role_id` AS roleId
						FROM user_doctor_rel r
						LEFT JOIN api_contracted_user u ON r.contracted_user_id = u.id
						LEFT JOIN api_user_info a ON r.manager_id = a.manager_id
					)d1 
					LEFT JOIN api_user_info b1 ON d1.parentId = b1.`manager_id`
					LEFT JOIN backstage_user_info b2 ON d1.doctorId = b2.manager_id
					LEFT JOIN api_role_info ro ON d1.roleId = ro.`id`
					WHERE 1=1 AND d1.buildType ='2'
	   			UNION
				SELECT d2.*,ro2.`item_name` AS roleName,b3.`name` AS parentName,
				b3.mobile AS parentMobile ,null AS diseaseIds
				FROM 
				(
					SELECT NULL AS contractedId,o.`user_id` AS managerId,
					u.name AS NAME,u.mobile AS mobile,o.`back_manager_id` AS doctorId,o.`in_use` AS inUse,
					u.`sex` AS sex,o.`create_time` AS createTime,2 AS buildType,
					IFNULL(
			          (YEAR(NOW()) - YEAR(u.birthday) - 1) + (
			            DATE_FORMAT(u.birthday, '%m%d') &lt;= DATE_FORMAT(NOW(), '%m%d')
			          ),
			          - 1
			        )AS age,
					u.`parent_id` AS parentId,u.`role_id` AS roleId,b.name AS doctorName
					FROM order_info o 
					LEFT JOIN api_user_info u ON o.`user_id` = u.`manager_id`
					LEFT JOIN backstage_user_info b ON o.`back_manager_id` = b.`manager_id`
					WHERE 1=1 AND o.back_manager_id IS NOT NULL
					GROUP BY o.user_id,o.back_manager_id  ORDER BY o.create_time ASC
				)d2
				LEFT JOIN api_user_info b3 ON d2.parentId = b3.`manager_id`
				LEFT JOIN api_role_info ro2 ON d2.roleId = ro2.`id`
				where 1=1 
				 <if test="ageBegin != null and ageBegin !=''">
		        	and d2.age &gt;= #{ageBegin,jdbcType=INTEGER}
			    </if>
			    <if test="ageEnd != null and ageEnd !=''">
			        and d2.age &lt;= #{ageEnd,jdbcType=INTEGER}
			    </if>
   			</if>
   			)d3 
   		 <where>
    	1=1
	    <if test="name != null and name !=''">
	        and d3.name like #{name,jdbcType=VARCHAR}
	    </if>
	    <if test="diseaseId != null and diseaseId !=''">
    	 	and FIND_IN_SET(#{diseaseId,jdbcType=VARCHAR},d3.diseaseIds)
    	</if>
	    <if test="mobile != null and mobile !=''">
	        and d3.mobile = #{mobile,jdbcType=VARCHAR}
	      </if>
	    <if test="inUse != null and inUse !=''">
	    	<if test="inUse ==1">
	    		and (d3.buildType='1' or d3.buildType='3')
	    	</if>
	    	<if test="inUse==0">
	    		and d3.buildType='2'
	    	</if>
	    </if>
	    <if test="doctorIdList != null and doctorIdList !=''">
	        and d3.doctorId in
	                <foreach item="item" index="index" collection="doctorIdList" 
	                         open="(" separator="," close=")">
	                        ${item}
	                </foreach>
	     </if>
	     <if test="startTime != null and startTime !=''">
		  AND 	DATE_FORMAT(d3.createTime, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startTime,jdbcType=VARCHAR}, '%Y-%m-%d') 
		  </if>
		  <if test="endTime != null and endTime !=''">
		  	and DATE_FORMAT(d3.createTime, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endTime,jdbcType=VARCHAR}, '%Y-%m-%d')
		  </if>
	  </where>
	 )d4
	WHERE 1=1
	GROUP BY d4.managerId
	ORDER BY d4.createTime DESC
   
  </select>
  
  <select id="selectInfoByPrimaryKey" parameterType="java.lang.Integer" resultType="com.semioe.api.vo.ApiContractedUserVO">
    select 
     u.id, u.manager_id as managerId, u.name, u.sex, u.card_id as cardId, u.birthday, 
     u.expiration_date as expirationDate, years, 
    u.create_time as createTime, u.update_time as updateTime, u.in_use as inUse,r.doctor_id as doctorId
    from api_contracted_user u
	left join user_doctor_rel r on u.id = r.contracted_user_id
    where u.id = #{id,jdbcType=INTEGER}
  </select>
  
  <!-- 20171031 -->
  <select id="selectApiUserByEntity" parameterType="com.semioe.api.vo.ApiContractedUserVO" resultType="com.semioe.api.vo.ApiUserInfoVO">
     select 
    u.manager_id as managerId, u.open_id as openId,u.parent_id, u.role_id, u.name, u.city,IF (c.birthday IS NULL,u.birthday,c.birthday) AS birthday, u.sex,
     u.image_url as imageUrl, u.address, u.company, 
    u.email, u.mobile, u.create_time, u.update_time, u.in_use as inUse,u.height,c.card_id as cardId
    from user_doctor_rel r 
	left join api_contracted_user c on r.contracted_user_id = c.id
    left join api_user_info u on r.manager_id = u.manager_id
    where r.in_use=1
    <if test="cardId !=null and cardId !=''">
       and  c.card_id = #{cardId,jdbcType=VARCHAR}
    </if> 
  </select>
  
  <!-- 20171217 -->
  <!-- 签约机构统计  天  月 -->
  <select id="selectAllBySignOrg"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">	
	
	SELECT da.count_date AS countDate,
	 GROUP_CONCAT(da.org_id, ":", bu.name,":",da.count_number)AS orgs
	 FROM 
	 ( 
	 	<if test="buildType ==0 or buildType==1">
			 SELECT 
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
			WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
			r.`manager_id`,o.`org_id`,SUM(1) AS count_number
			 FROM user_doctor_rel r
			 LEFT JOIN jy_org_doc_rel o ON r.`doctor_id` = o.`doctor_id`
			 WHERE  r.`in_use`=1
			 <if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			 </if>
			 <if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			 </if>
			 AND r.`build_type`=1 AND o.in_use=1
			 GROUP BY count_date,org_id
		 </if>
		 <if test="buildType ==0">
		  	  UNION ALL
		 </if>
		 <if test="buildType ==0 or buildType==3">
			 SELECT
				CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
			 WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
			 r.`manager_id`,o.`org_id`,SUM(1) AS count_number
			 FROM user_doctor_rel r
			 LEFT JOIN jy_org_doc_rel o ON r.`doctor_id` = o.`doctor_id`
			 WHERE  r.`in_use`=1
			 <if test="displayType !=null and displayType!='' and displayType==1">
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			 </if>
			 <if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			 </if>
			 AND r.`build_type`=3 AND o.in_use=1
			 GROUP BY count_date,org_id
		 </if>
	)da
	LEFT JOIN backstage_user_info bu ON da.org_id = bu.`manager_id`
	GROUP BY da.count_date  ORDER BY count_date DESC
  </select>
  <!-- 签约机构统计  汇总 -->
  <select id="selectAllBySignOrgSummary"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">	
	
	SELECT GROUP_CONCAT(da1.org_id, ":", da1.name,":",da1.count_number)AS orgs
	FROM(
		SELECT da.org_id,bu.name,SUM(da.count_number) AS count_number
		 FROM 
		 ( 
		 	<if test="buildType ==0 or buildType==1">
				 SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
				r.`manager_id`,o.`org_id`,SUM(1) AS count_number
				 FROM user_doctor_rel r
				 LEFT JOIN jy_org_doc_rel o ON r.`doctor_id` = o.`doctor_id`
				 WHERE  r.`in_use`=1
				 and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				 and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				 AND r.`build_type`=1 AND o.in_use=1
				 GROUP BY count_date,org_id
			 </if>
			 <if test="buildType ==0">
			  	  UNION ALL
			 </if>
			 <if test="buildType ==0 or buildType==3">
				 SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
				 r.`manager_id`,o.`org_id`,SUM(1) AS count_number
				 FROM user_doctor_rel r
				 LEFT JOIN jy_org_doc_rel o ON r.`doctor_id` = o.`doctor_id`
				 WHERE  r.`in_use`=1
				 and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				 and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				 AND r.`build_type`=3 AND o.in_use=1
				 GROUP BY count_date,org_id
			 </if>
		)da
		LEFT JOIN backstage_user_info bu ON da.org_id = bu.`manager_id`
		GROUP BY da.org_id
	)da1
  </select>
	 <!-- 签约医生统计   天  月 -->
	<select id="selectAllBySignDoc"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">
	 SELECT da.count_date as countDate,
	 GROUP_CONCAT(da.doctor_id, ":", bu.name,":",da.count_number)AS doctors
	 FROM 
	 (
		 SELECT
		 CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
			  WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS count_date,
			r.`manager_id`,r.`doctor_id`,SUM(1) AS count_number,od.org_id
		 FROM user_doctor_rel r
		 LEFT JOIN jy_org_doc_rel od ON r.doctor_id = od.`doctor_id`
		 WHERE r.`in_use`=1
			 <if test="displayType !=null and displayType!='' and displayType==1">
					and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
					and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			 </if>
			 <if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			 </if>
			<if test="buildType ==0">
				and r.build_type !=2
			</if>
			<if test="buildType ==1 or buildType = 3" >
				and r.build_type =#{buildType,jdbcType=INTEGER}
			</if>
		 GROUP BY count_date,doctor_id
	)da
	LEFT JOIN backstage_user_info bu ON da.doctor_id = bu.`manager_id`
	where 1=1 
	<if test="managerId !=null and managerId !=''" >
		and da.org_id =#{managerId,jdbcType=VARCHAR}
	</if>
	GROUP BY da.count_date  
	ORDER BY da.count_date DESC
	</select>
	<!-- 签约医生统计 汇总 -->
	<select id="selectAllBySignDocSummary"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">
	SELECT  GROUP_CONCAT(da1.doctor_id, ":", da1.name,":",da1.count_number)AS doctors FROM(
		SELECT  da.doctor_id,da.org_id,bu.name,SUM(da.count_number) AS count_number
		 FROM 
		 (
			 SELECT DATE_FORMAT(r.create_time, '%Y-%m-%d') AS count_date,
				r.`manager_id`,r.`doctor_id`,SUM(1) AS count_number,od.org_id
			 FROM user_doctor_rel r
			 LEFT JOIN jy_org_doc_rel od ON r.doctor_id = od.`doctor_id`
			 WHERE r.`in_use`=1
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
				<if test="buildType ==0">
					and r.build_type !=2
				</if>
				<if test="buildType ==1 or buildType == 3" >
					and r.build_type =#{buildType,jdbcType=INTEGER}
				</if>
			 GROUP BY count_date,doctor_id
		)da
		LEFT JOIN backstage_user_info bu ON da.doctor_id = bu.`manager_id`
		where 1=1 
		<if test="managerId !=null and managerId !=''" >
			and da.org_id =#{managerId,jdbcType=VARCHAR}
		</if>
		GROUP BY da.doctor_id
	)da1
	</select>
	<!-- 家庭组 统计 天 月 -->
	<select id="selectFamilyCountListPage"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">
	
	SELECT da.doctorId,bu.`name` AS doctorName,
	da.createTime AS signDate,
	COUNT(DISTINCT(da.parentId)) AS countNumber
	,GROUP_CONCAT(DISTINCT(da.parentId)) AS parentIds,org.name AS orgName
 	FROM 
	(	
		SELECT da1.pId AS parentId,p.`manager_id` AS childId,da1.`doctor_id` AS doctorId,da1.createTime
		FROM (
			SELECT r.`manager_id` AS pId,c.`parent_id` AS parentId,r.`build_type`,r.`doctor_id`,
			CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
			  WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS createTime
			FROM user_doctor_rel r
			LEFT JOIN api_user_info c ON r.`manager_id` = c.`manager_id` and c.manager_id != c.parent_id
			WHERE r.`in_use`=1
			<if test="buildType ==0">
				and r.build_type !=2
			</if>
			<if test="buildType ==1 or buildType == 3" >
				and r.build_type =#{buildType,jdbcType=INTEGER}
			</if>
			<if test="managerId !=null and managerId!=''">
      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
   			</if> 
			<if test="displayType !=null and displayType!='' and displayType==1">
					and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
					and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			 </if>
			 <if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			 </if>
		)da1
		LEFT JOIN api_user_info p ON da1.pId = p.`parent_id`
		WHERE p.`manager_id` IS NOT NULL AND p.`manager_id` !=''
			 AND p.`manager_id`!= p.`parent_id`
		
		UNION
		
		SELECT c.`parent_id` AS parentId,r.`manager_id` AS childId,r.doctor_id AS doctorId
		,CASE  WHEN 1=#{displayType,jdbcType=INTEGER} THEN  DATE_FORMAT(r.create_time, '%Y-%m-%d')
		WHEN 2=#{displayType,jdbcType=INTEGER} THEN DATE_FORMAT(r.create_time, '%Y-%m') END AS createTime
		FROM user_doctor_rel r
		LEFT JOIN api_user_info c ON r.`manager_id` = c.`manager_id` and c.manager_id !=c.parent_id
		WHERE r.`in_use`=1
			<if test="buildType ==0">
				and r.build_type !=2
			</if>
			<if test="buildType ==1 or buildType == 3" >
				and r.build_type =#{buildType,jdbcType=INTEGER}
			</if>
			AND c.parent_id IS NOT NULL AND c.parent_id!=''
			AND c.manager_id !=c.parent_id
			<if test="displayType !=null and displayType!='' and displayType==1">
					and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
					and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			 </if>
			 <if test="displayType !=null and displayType!='' and displayType==2">
					and DATE_FORMAT(r.create_time, '%Y-%m')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m') 
					and DATE_FORMAT(r.create_time, '%Y-%m') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m')
			 </if>
			<if test="managerId !=null and managerId!=''">
      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
   			</if> 
	)da
	LEFT JOIN backstage_user_info bu ON da.doctorId = bu.`manager_id`
	LEFT JOIN (
		SELECT od.`doctor_id`,od.`org_id`,bi.`name`FROM 
		jy_org_doc_rel od 
		LEFT JOIN backstage_user_info bi ON od.`org_id` = bi.`manager_id`
	)org ON da.doctorId = org.doctor_id
	GROUP BY da.createTime,da.doctorId
	</select>
	<!-- 家庭组统计  汇总 -->
	<select id="selectFamilySummaryCountListPage"  parameterType="com.semioe.api.vo.ApiUserInfoVO" 
	resultType="com.semioe.api.vo.UserCountVO">
	
	SELECT da.doctorId,bu.`name` AS doctorName,
	COUNT(DISTINCT(da.parentId)) AS countNumber
	,GROUP_CONCAT(DISTINCT(da.parentId)) AS parentIds,org.name AS orgName
 	FROM 
	(
		SELECT da1.pId AS parentId,p.`manager_id` AS childId,da1.`doctor_id` AS doctorId,da1.createTime
		FROM (
			SELECT r.`manager_id` AS pId,c.`parent_id` AS parentId,r.`build_type`,r.`doctor_id`,
			DATE_FORMAT(r.create_time, '%Y-%m-%d') AS createTime
			FROM user_doctor_rel r
			LEFT JOIN api_user_info c ON r.`manager_id` = c.`manager_id`
			WHERE r.`in_use`=1
			<if test="buildType ==0">
				and r.build_type !=2
			</if>
			<if test="buildType ==1 or buildType == 3" >
				and r.build_type =#{buildType,jdbcType=INTEGER}
			</if>
			<if test="managerId !=null and managerId!=''">
      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
   			</if> 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
				and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
		)da1
		LEFT JOIN api_user_info p ON da1.pId = p.`parent_id` 
		WHERE p.`manager_id` IS NOT NULL AND p.`manager_id` !=''
		     AND p.`manager_id`!=p.`parent_id`
		UNION
		
		SELECT c.`parent_id` AS parentId,r.`manager_id` AS childId,r.doctor_id AS doctorId
		,DATE_FORMAT(r.create_time, '%Y-%m-%d') AS createTime
		FROM user_doctor_rel r
		LEFT JOIN api_user_info c ON r.`manager_id` = c.`manager_id` 
		WHERE r.`in_use`=1
			<if test="buildType ==0">
				and r.build_type !=2
			</if>
			<if test="buildType ==1 or buildType == 3" >
				and r.build_type =#{buildType,jdbcType=INTEGER}
			</if>
			AND c.parent_id IS NOT NULL AND c.parent_id!=''
			AND c.`manager_id`!=c.`parent_id`
			and DATE_FORMAT(r.create_time, '%Y-%m-%d')  &gt;=  DATE_FORMAT(#{startDate,jdbcType=VARCHAR}, '%Y-%m-%d') 
			and DATE_FORMAT(r.create_time, '%Y-%m-%d') &lt;=  DATE_FORMAT(#{endDate,jdbcType=VARCHAR}, '%Y-%m-%d')
			<if test="managerId !=null and managerId!=''">
      			and r.doctor_id = #{managerId,jdbcType=VARCHAR}
   			</if> 
	)da
	LEFT JOIN backstage_user_info bu ON da.doctorId = bu.`manager_id`
	LEFT JOIN (
		SELECT od.`doctor_id`,od.`org_id`,bi.`name`FROM 
		jy_org_doc_rel od 
		LEFT JOIN backstage_user_info bi ON od.`org_id` = bi.`manager_id`
	)org ON da.doctorId = org.doctor_id
	GROUP BY da.doctorId
	</select>
	<!-- 家庭组  明细 -->
	<select id="selectAllByFamilyDetailListPage"  parameterType="com.semioe.api.vo.UserCountVO" 
	resultType="com.semioe.api.vo.ApiContractedUserVO">
	
	 SELECT da1.*,od.`org_id` AS orgId,od.name AS orgName  FROM (
		 <if test="buildType ==1 or buildType == 0" >
			SELECT da.*,ac.`card_id` AS cardId,ac.name,bu.`name` AS doctorName FROM (
				SELECT au.`manager_id` AS managerId,au.mobile,
				ar.`item_name` AS roleName
				,ur.`create_time` AS createTime
				,ur.`contracted_user_id` AS contractedId
				,ur.`build_type` AS buildType,ur.`doctor_id` AS doctorId
				FROM api_user_info au 
				LEFT JOIN user_doctor_rel ur ON au.`manager_id` = ur.`manager_id`  AND ur.`build_type` =1
				LEFT JOIN api_role_info ar ON au.`role_id` = ar.`id` 
				WHERE au.`in_use`=1
				<if test="managerList != null and managerList !=''">
	        		AND au.`manager_id` in
	                <foreach item="item" index="index" collection="managerList" 
	                         open="(" separator="," close=")">
	                        ${item}
	                </foreach>
	     		</if>
			)da 
			LEFT JOIN api_contracted_user ac ON da.contractedId = ac.id
			LEFT JOIN backstage_user_info bu ON da.doctorId = bu.`manager_id`
		</if>
		<if test="buildType ==0">
			UNION
		</if>
		<if test="buildType ==3 or buildType == 0" >
		    SELECT da.managerId,am.mobile,da.roleName,am.sign_time AS createTime,
				da.contractedId,da.buildType,da.doctorId,am.document_code AS cardId,
				am.name,bu.`name` AS doctorName FROM (
					SELECT au.`manager_id` AS managerId,au.mobile,
					ar.`item_name` AS roleName
					,ur.`create_time` AS createTime
					,ur.`contracted_user_id` AS contractedId
					,ur.`build_type` AS buildType,ur.`doctor_id` AS doctorId
					FROM api_user_info au 
					LEFT JOIN user_doctor_rel ur ON au.`manager_id` = ur.`manager_id`  AND ur.`build_type` =3
					LEFT JOIN api_role_info ar ON au.`role_id` = ar.`id` 
					WHERE au.`in_use`=1
					<if test="managerList != null and managerList !=''">
		        		AND au.`manager_id` in
		                <foreach item="item" index="index" collection="managerList" 
		                         open="(" separator="," close=")">
		                        ${item}
		                </foreach>
		     		</if>
			)da 
			LEFT JOIN api_motherhood_user am ON da.contractedId = am.id
			LEFT JOIN backstage_user_info bu ON da.doctorId = bu.`manager_id`
		</if>
	)da1
	LEFT JOIN (
		SELECT r.`doctor_id`,r.`org_id`,b.`name`
		FROM jy_org_doc_rel r LEFT JOIN backstage_user_info b 
		ON r.`org_id` = b.`manager_id` WHERE r.`in_use`=1 
	) od 
	ON da1.doctorId = od.`doctor_id`
	GROUP BY da1.managerId,da1.doctorId	  ORDER BY da1.buildType DESC
	</select> 
</mapper>