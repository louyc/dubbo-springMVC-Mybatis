<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.semioe.dubbo.dao.GoodsInfoMapper">
  <resultMap id="BaseResultMap" type="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="supplier_name" jdbcType="VARCHAR" property="supplierName" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="in_use" jdbcType="INTEGER" property="inUse" />
    <result column="keywords_ids" jdbcType="VARCHAR" property="keywordsIds" />
    <result column="keywords_names" jdbcType="VARCHAR" property="keywordsNames" />
    <result column="goods_type" jdbcType="VARCHAR" property="goodsType" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="goods_desc" jdbcType="LONGVARCHAR" property="goodsDesc" />
    <result column="img_url" jdbcType="LONGVARCHAR" property="imgUrl" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, goods_name, supplier_name, price, unit, stock, type, create_user, create_time, 
    update_time, in_use, keywords_ids, keywords_names, goods_type
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    goods_desc, img_url
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.semioe.api.entity.GoodsInfoExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from goods_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.semioe.api.entity.GoodsInfoExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from goods_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from goods_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from goods_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.semioe.api.entity.GoodsInfoExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from goods_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into goods_info (goods_name, supplier_name, price, 
      unit, stock, type, 
      create_user, create_time, update_time, 
      in_use, keywords_ids, keywords_names, 
      goods_type, goods_desc, img_url
      )
    values (#{goodsName,jdbcType=VARCHAR}, #{supplierName,jdbcType=VARCHAR}, #{price,jdbcType=DOUBLE}, 
      #{unit,jdbcType=VARCHAR}, #{stock,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{createUser,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{inUse,jdbcType=INTEGER}, #{keywordsIds,jdbcType=VARCHAR}, #{keywordsNames,jdbcType=VARCHAR}, 
      #{goodsType,jdbcType=VARCHAR}, #{goodsDesc,jdbcType=LONGVARCHAR}, #{imgUrl,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into goods_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="goodsName != null">
        goods_name,
      </if>
      <if test="supplierName != null">
        supplier_name,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="stock != null">
        stock,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="inUse != null">
        in_use,
      </if>
      <if test="keywordsIds != null">
        keywords_ids,
      </if>
      <if test="keywordsNames != null">
        keywords_names,
      </if>
      <if test="goodsType != null">
        goods_type,
      </if>
      <if test="goodsDesc != null">
        goods_desc,
      </if>
      <if test="imgUrl != null">
        img_url,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="goodsName != null">
        #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="supplierName != null">
        #{supplierName,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        #{price,jdbcType=DOUBLE},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="stock != null">
        #{stock,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        #{inUse,jdbcType=INTEGER},
      </if>
      <if test="keywordsIds != null">
        #{keywordsIds,jdbcType=VARCHAR},
      </if>
      <if test="keywordsNames != null">
        #{keywordsNames,jdbcType=VARCHAR},
      </if>
      <if test="goodsType != null">
        #{goodsType,jdbcType=VARCHAR},
      </if>
      <if test="goodsDesc != null">
        #{goodsDesc,jdbcType=LONGVARCHAR},
      </if>
      <if test="imgUrl != null">
        #{imgUrl,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.semioe.api.entity.GoodsInfoExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from goods_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.goodsName != null">
        goods_name = #{record.goodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.supplierName != null">
        supplier_name = #{record.supplierName,jdbcType=VARCHAR},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DOUBLE},
      </if>
      <if test="record.unit != null">
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.stock != null">
        stock = #{record.stock,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.createUser != null">
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inUse != null">
        in_use = #{record.inUse,jdbcType=INTEGER},
      </if>
      <if test="record.keywordsIds != null">
        keywords_ids = #{record.keywordsIds,jdbcType=VARCHAR},
      </if>
      <if test="record.keywordsNames != null">
        keywords_names = #{record.keywordsNames,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsType != null">
        goods_type = #{record.goodsType,jdbcType=VARCHAR},
      </if>
      <if test="record.goodsDesc != null">
        goods_desc = #{record.goodsDesc,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.imgUrl != null">
        img_url = #{record.imgUrl,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    set id = #{record.id,jdbcType=INTEGER},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      supplier_name = #{record.supplierName,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DOUBLE},
      unit = #{record.unit,jdbcType=VARCHAR},
      stock = #{record.stock,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      in_use = #{record.inUse,jdbcType=INTEGER},
      keywords_ids = #{record.keywordsIds,jdbcType=VARCHAR},
      keywords_names = #{record.keywordsNames,jdbcType=VARCHAR},
      goods_type = #{record.goodsType,jdbcType=VARCHAR},
      goods_desc = #{record.goodsDesc,jdbcType=LONGVARCHAR},
      img_url = #{record.imgUrl,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    set id = #{record.id,jdbcType=INTEGER},
      goods_name = #{record.goodsName,jdbcType=VARCHAR},
      supplier_name = #{record.supplierName,jdbcType=VARCHAR},
      price = #{record.price,jdbcType=DOUBLE},
      unit = #{record.unit,jdbcType=VARCHAR},
      stock = #{record.stock,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      in_use = #{record.inUse,jdbcType=INTEGER},
      keywords_ids = #{record.keywordsIds,jdbcType=VARCHAR},
      keywords_names = #{record.keywordsNames,jdbcType=VARCHAR},
      goods_type = #{record.goodsType,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    <set>
      <if test="goodsName != null">
        goods_name = #{goodsName,jdbcType=VARCHAR},
      </if>
      <if test="supplierName != null">
        supplier_name = #{supplierName,jdbcType=VARCHAR},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DOUBLE},
      </if>
      <if test="unit != null">
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="stock != null">
        stock = #{stock,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        in_use = #{inUse,jdbcType=INTEGER},
      </if>
      <if test="keywordsIds != null">
        keywords_ids = #{keywordsIds,jdbcType=VARCHAR},
      </if>
      <if test="keywordsNames != null">
        keywords_names = #{keywordsNames,jdbcType=VARCHAR},
      </if>
      <if test="goodsType != null">
        goods_type = #{goodsType,jdbcType=VARCHAR},
      </if>
      <if test="goodsDesc != null">
        goods_desc = #{goodsDesc,jdbcType=LONGVARCHAR},
      </if>
      <if test="imgUrl != null">
        img_url = #{imgUrl,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    set goods_name = #{goodsName,jdbcType=VARCHAR},
      supplier_name = #{supplierName,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      unit = #{unit,jdbcType=VARCHAR},
      stock = #{stock,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      in_use = #{inUse,jdbcType=INTEGER},
      keywords_ids = #{keywordsIds,jdbcType=VARCHAR},
      keywords_names = #{keywordsNames,jdbcType=VARCHAR},
      goods_type = #{goodsType,jdbcType=VARCHAR},
      goods_desc = #{goodsDesc,jdbcType=LONGVARCHAR},
      img_url = #{imgUrl,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.semioe.api.entity.GoodsInfo">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update goods_info
    set goods_name = #{goodsName,jdbcType=VARCHAR},
      supplier_name = #{supplierName,jdbcType=VARCHAR},
      price = #{price,jdbcType=DOUBLE},
      unit = #{unit,jdbcType=VARCHAR},
      stock = #{stock,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      create_user = #{createUser,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      in_use = #{inUse,jdbcType=INTEGER},
      keywords_ids = #{keywordsIds,jdbcType=VARCHAR},
      keywords_names = #{keywordsNames,jdbcType=VARCHAR},
      goods_type = #{goodsType,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
    <!-- DTO 查询部分 -->
  <resultMap id="VoResultMap" type="com.semioe.api.vo.GoodsInfoVO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="goods_name" jdbcType="VARCHAR" property="goodsName" />
    <result column="supplier_name" jdbcType="VARCHAR" property="supplierName" />
    <result column="img_url" jdbcType="VARCHAR" property="imgUrl" />
    <result column="price" jdbcType="DOUBLE" property="price" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="create_user" jdbcType="VARCHAR" property="createUser" />
    <result column="create_user_desc" jdbcType="VARCHAR" property="createUserDesc" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="in_use" jdbcType="INTEGER" property="inUse" />
    <result column="goods_desc" jdbcType="LONGVARCHAR" property="goodsDesc" />
    <result column="keywords_ids" jdbcType="VARCHAR" property="keywordsIds" />
    <result column="keywords_names" jdbcType="VARCHAR" property="keywordsNames" />
    <result column="goods_type" jdbcType="VARCHAR" property="goodsType" />
  </resultMap>
  
  <sql id="VO_Column_List">
  	goods.id, goods.goods_name, goods.supplier_name, goods.img_url, 
  	goods.price, goods.unit, goods.stock, goods.type, goods.create_user, 
  	goods.create_time, goods.update_time, goods.in_use , goods.goods_desc ,
  	goods.keywords_ids, goods.keywords_names , goods.goods_type
  </sql>
  
  <sql id="Entity_Where_Clause">
  	<if test="goodsName != null  and goodsName != '' ">
    	AND goods.goods_name like CONCAT(#{goodsName,jdbcType=VARCHAR},'%')
    </if>
    <if test="supplierName != null  and supplierName != '' ">
    	AND goods.supplier_name like CONCAT(#{supplierName,jdbcType=VARCHAR},'%')
    </if>
    <if test="type != null">
    	AND goods.type = #{type,jdbcType=INTEGER}
    </if>
    
    <if test="goodsType != null and goodsType != '' ">
    	AND goods.goods_type = #{goodsType,jdbcType=VARCHAR}
    </if>
    
    <if test="goodsCountGt != null ">
    	AND	goods.stock &gt; #{goodsCountGt,jdbcType=INTEGER}
    </if>
    AND goods.in_use = 1
  </sql>
  
  <sql id="keywords_like_where">
  	<if test="keywordsIds != null  and keywordsIds != '' ">
    	AND goods.keywords_ids like CONCAT(#{keywordsIds,jdbcType=VARCHAR},'%')
    </if>
    <if test="keywordsNames != null  and keywordsNames != '' ">
    	AND goods.keywords_names like CONCAT(#{keywordsNames,jdbcType=VARCHAR},'%')
    </if>
  </sql>
  
  <select id="countByEntity" parameterType="com.semioe.api.entity.GoodsInfo" resultType="java.lang.Long">
    select count(goods.id) from goods_info as goods
    LEFT JOIN backstage_user_info usif ON goods.create_user = usif.manager_id
    where 1=1 
    	<include refid="Entity_Where_Clause" />
    	<include refid="keywords_like_where" />
  </select>
  
  <select id="selectByEntity" parameterType="com.semioe.api.entity.GoodsInfo" resultMap="VoResultMap">
   	select 
    	<include refid="VO_Column_List" />
    	, usif.name as create_user_desc
    from 
    	goods_info as goods
	LEFT JOIN backstage_user_info usif ON goods.create_user = usif.manager_id
    where 1=1 
    	<include refid="Entity_Where_Clause" />
    	<include refid="keywords_like_where" />
    order by goods.create_time  desc
    <if test="currentResult != null and currentResult &gt;= 0 and showCount != null and showCount &gt; 0 ">
    	limit #{currentResult,jdbcType=INTEGER},#{showCount,jdbcType=INTEGER}
    </if>
  </select>
  
  <!-- 根据关键字查询数据 Start -->
  <select id="countByKeywords" parameterType="com.semioe.api.entity.GoodsInfo" resultType="java.lang.Long">
    SELECT 
    	COUNT( DISTINCT goods.id )
    FROM goods_info AS goods
    LEFT JOIN backstage_user_info AS usif ON goods.create_user = usif.manager_id
    <if test="( keywordsIds != null and keywordsIds != '' ) or 
				(keywordsNames != null and keywordsNames != '') or 
					(keywordsNameList != null and keywordsNameList.size() > 0)" >
		LEFT JOIN keywords_rel AS ker ON goods.id = ker.relation_id
		LEFT JOIN keywords AS ke ON ker.keywords_id = ke.id
	</if>
	WHERE goods.type = 1 
		<if test="( keywordsIds != null and keywordsIds != '' ) or 
				(keywordsNames != null and keywordsNames != '') or 
					(keywordsNameList != null and keywordsNameList.size() > 0)" >
			AND ker.type = 0  
		</if>
    	<include refid="Entity_Where_Clause" />
    	<include refid="keywords_equals_where" />
  </select>
  
  <select id="selectByKeywords" parameterType="com.semioe.api.entity.GoodsInfo" resultMap="VoResultMap">
   	SELECT DISTINCT
    	<include refid="VO_Column_List" />
    	, usif.name AS create_user_desc
    FROM 
    	goods_info AS goods
	LEFT JOIN backstage_user_info usif ON goods.create_user = usif.manager_id
	<if test="( keywordsIds != null and keywordsIds != '' ) or 
				(keywordsNames != null and keywordsNames != '') or 
					(keywordsNameList != null and keywordsNameList.size() > 0)" >
		LEFT JOIN keywords_rel AS ker ON goods.id = ker.relation_id
		LEFT JOIN keywords AS ke ON ker.keywords_id = ke.id
	</if>
	WHERE goods.type = 1 
		<if test="( keywordsIds != null and keywordsIds != '' ) or 
				(keywordsNames != null and keywordsNames != '') or 
					(keywordsNameList != null and keywordsNameList.size() > 0)" >
			AND ker.type = 0  
		</if>
    	<include refid="Entity_Where_Clause" />
    	<include refid="keywords_equals_where" />
    order by goods.create_time  desc
    <if test="currentResult != null and currentResult &gt;= 0 and showCount != null and showCount &gt; 0 ">
    	limit #{currentResult,jdbcType=INTEGER},#{showCount,jdbcType=INTEGER}
    </if>
  </select>
  
  
  <sql id="keywords_equals_where">
  	<if test="id != null and id != ''">
  		AND goods.id = #{id,jdbcType=INTEGER}
  	</if>
  	<if test="idList != null and idList.size() > 0">
    	AND goods.id IN
    	<foreach item="item" index="index" collection="idList" open="(" separator="," close=")">
    		${item}
    	</foreach>
    </if>
  	<if test="keywordsIds != null  and keywordsIds != '' ">
    	AND ke.id = #{keywordsIds,jdbcType=VARCHAR}
    </if>
    <if test="keywordsNames != null  and keywordsNames != '' ">
    	AND ke.`name` = #{keywordsNames,jdbcType=VARCHAR}
    </if>
    <if test="keywordsNameList != null and keywordsNameList.size() &gt; 0">
		AND ke.`name` in 
		<foreach  collection="keywordsNameList" index="index" item="item" open="(" separator="," close=")" >
	    	#{item}
	    </foreach>
	</if>
  </sql>
  
  <!-- 根据关键字查询数据 end -->
  
  <select id="selectByName" parameterType="com.semioe.api.entity.GoodsInfo" resultMap="VoResultMap">
   	select 
    	<include refid="VO_Column_List" />
    from 
    	goods_info as goods
    where 1=1  and in_use=1
    <if test="goodsName != null  and goodsName != '' ">
    	AND goods.goods_name = #{goodsName,jdbcType=VARCHAR}
    </if>
  </select>
  
  <select id="selectVoByPrimaryKey" parameterType="java.lang.Integer" resultMap="VoResultMap">
    select 
    	<include refid="VO_Column_List" />
    	, usif.name as create_user_desc
    from 
    	goods_info as goods
	LEFT JOIN backstage_user_info usif ON goods.create_user = usif.manager_id
    where goods.id = #{id,jdbcType=INTEGER}
  </select>
  
  <!-- 根据服务id, 查询商品数据 -->
  <select id="selectByServiceId" parameterType="java.lang.Integer" resultMap="VoResultMap">
   	SELECT DISTINCT
    	<include refid="VO_Column_List" />
    FROM 
		goods_info AS goods
	INNER JOIN 
		service_goods_rel AS sgrel ON sgrel.goods_id = goods.id
	WHERE
		sgrel.service_id = #{serviceId,jdbcType=INTEGER}
  </select>
  
</mapper>