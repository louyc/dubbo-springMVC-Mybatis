<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.semioe.dubbo.dao.KeywordsRelMapper">
  <resultMap id="BaseResultMap" type="com.semioe.api.entity.KeywordsRel">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="relation_id" jdbcType="INTEGER" property="relationId" />
    <result column="keywords_id" jdbcType="INTEGER" property="keywordsId" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="key_type" jdbcType="INTEGER" property="keyType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, relation_id, keywords_id, type,key_type
  </sql>
  <select id="selectByExample" parameterType="com.semioe.api.entity.KeywordsRelExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from keywords_rel
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from keywords_rel
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from keywords_rel
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.semioe.api.entity.KeywordsRelExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from keywords_rel
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.semioe.api.entity.KeywordsRel">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into keywords_rel (relation_id, keywords_id, type,key_type
      )
    values (#{relationId,jdbcType=INTEGER}, #{keywordsId,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}
      ,#{keyType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.semioe.api.entity.KeywordsRel">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into keywords_rel
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="relationId != null">
        relation_id,
      </if>
      <if test="keywordsId != null">
        keywords_id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="keyType != null">
        key_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="relationId != null">
        #{relationId,jdbcType=INTEGER},
      </if>
      <if test="keywordsId != null">
        #{keywordsId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="keyType != null">
        #{keyType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.semioe.api.entity.KeywordsRelExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from keywords_rel
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords_rel
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.relationId != null">
        relation_id = #{record.relationId,jdbcType=INTEGER},
      </if>
      <if test="record.keywordsId != null">
        keywords_id = #{record.keywordsId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.keyType != null">
        type = #{record.keyType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords_rel
    set id = #{record.id,jdbcType=INTEGER},
      relation_id = #{record.relationId,jdbcType=INTEGER},
      keywords_id = #{record.keywordsId,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      key_type = #{record.keyType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.semioe.api.entity.KeywordsRel">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords_rel
    <set>
      <if test="relationId != null">
        relation_id = #{relationId,jdbcType=INTEGER},
      </if>
      <if test="keywordsId != null">
        keywords_id = #{keywordsId,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="keyType != null">
        key_type = #{keyType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.semioe.api.entity.KeywordsRel">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords_rel
    set relation_id = #{relationId,jdbcType=INTEGER},
      keywords_id = #{keywordsId,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      key_type = #{keyType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

	<select id="selectByKeywords" resultMap="BaseResultMap">
		SELECT
		kr.*
		FROM
		keywords_rel kr
		LEFT JOIN keywords k ON kr.keywords_id = k.id
		where k.`name` in
		<foreach item="item" index="index" collection="array" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</select> 
  
  <select id="selectByRelationId" parameterType="java.lang.Integer" resultType="java.util.Map">
    select 
      r.keywords_id as keywordsId,k.name
    from keywords_rel r left JOIN keywords k on r.keywords_id = k.id
    where r.relation_id = #{0} and r.type = #{1}
  </select>
  
  <select id="selectListByRelationId" parameterType="java.lang.Integer" 
  resultType="com.semioe.api.entity.Keywords">
    select 
      k.*
    from keywords_rel r left JOIN keywords k on r.keywords_id = k.id
    where r.relation_id = #{0} and r.type = #{1}
  </select>
  
  <!-- 批量操作 -->
  
  <insert id="insertList" parameterType="java.util.List" >
	  <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
	      SELECT LAST_INSERT_ID()
	  </selectKey>
      INSERT INTO keywords_rel ( relation_id , keywords_id , type ,key_type ) VALUES
      <foreach collection="list" item="item" index="index" separator="," >
        ( #{item.relationId,jdbcType=INTEGER}, #{item.keywordsId,jdbcType=INTEGER}, #{item.type,jdbcType=INTEGER},
        #{item.keyType,jdbcType=INTEGER} )
      </foreach>
  </insert> 
  
  <delete id="deleteByRelationId" parameterType="java.lang.Integer">
    delete from keywords_rel
    where relation_id = #{0} and type = #{1}
  </delete>
  
</mapper>