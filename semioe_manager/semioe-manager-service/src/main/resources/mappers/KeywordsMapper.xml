<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.semioe.dubbo.dao.KeywordsMapper">
  <resultMap id="BaseResultMap" type="com.semioe.api.entity.Keywords">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="in_use" jdbcType="INTEGER" property="inUse" />
    <result column="key_type" jdbcType="INTEGER" property="keyType" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, name, create_time, update_time, in_use,key_type
  </sql>
  <select id="selectByExample" parameterType="com.semioe.api.entity.KeywordsExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from keywords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from keywords
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from keywords
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.semioe.api.entity.KeywordsExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from keywords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.semioe.api.entity.Keywords">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into keywords (name, create_time, update_time, 
      in_use,key_type)
    values (#{name,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{inUse,jdbcType=INTEGER},#{keyType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.semioe.api.entity.Keywords">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into keywords
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="inUse != null">
        in_use,
      </if>
      <if test="keyType != null">
        key_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        #{inUse,jdbcType=INTEGER},
      </if>
      <if test="keyType != null">
        #{keyType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.semioe.api.entity.KeywordsExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from keywords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.inUse != null">
        in_use = #{record.inUse,jdbcType=INTEGER},
      </if>
      <if test="record.keyType != null">
        key_type = #{record.keyType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      in_use = #{record.inUse,jdbcType=INTEGER},
      key_type = #{record.keyType,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.semioe.api.entity.Keywords">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="inUse != null">
        in_use = #{inUse,jdbcType=INTEGER},
      </if>
      <if test="keyType != null">
        key_type = #{keyType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.semioe.api.entity.Keywords">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update keywords
    set name = #{name,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      in_use = #{inUse,jdbcType=INTEGER},
      key_type = #{keyType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectKeywordsListPage" parameterType="com.semioe.api.entity.Keywords" resultMap="BaseResultMap">
   select
    <include refid="Base_Column_List" />
    from keywords where 1=1
    <if test="name !=null and name!=''">
         AND name like CONCAT(#{name,jdbcType=VARCHAR},'%')
    </if>
    order by create_time desc
  </select>
  
  <select id="getObjectCountByName" parameterType="java.lang.String" resultType="java.lang.Integer">
    select count(*) from keywords where name = #{name,jdbcType=VARCHAR}
  </select>
  
  <select id="getKeywordsBy" parameterType="com.semioe.api.entity.Keywords" resultMap="BaseResultMap">
  	SELECT k.* FROM keywords k WHERE k.`name` = #{name} AND k.`id` != #{id} LIMIT 1
  </select>
  
  
  <!-- 商品&服务查询相关 -->
  <resultMap id="RelationResultMap" type="com.semioe.api.vo.RelationVO">
    <result column="relation_id" jdbcType="INTEGER" property="relationId" />
    <result column="relation_name" jdbcType="VARCHAR" property="relationName" />
    <result column="relation_desc" jdbcType="VARCHAR" property="relationDesc" />
    <result column="relation_supplier" jdbcType="VARCHAR" property="relationSupplier" />
    <result column="relation_supplier_id" jdbcType="VARCHAR" property="relationSupplierId" />
    <result column="relation_img_url" jdbcType="VARCHAR" property="relationImgUrl" />
    <result column="relation_code" jdbcType="VARCHAR" property="relationCode" />
    <result column="relation_code_name" jdbcType="VARCHAR" property="relationCodeName" />
    <result column="relation_price" jdbcType="DOUBLE" property="relationPrice" />
    <result column="type" jdbcType="VARCHAR" property="type" />
  </resultMap>
  
  <!-- 商品&服务联合查询语句 -->
  <sql id="Service_Goods_Union_SQL" >
  	SELECT 
		se.id AS relation_id ,
		se.`name` AS relation_name ,
		se.description AS relation_desc ,
		us.`name` AS relation_supplier ,
		se.create_user_id AS relation_supplier_id ,
		'/upFile/default_goods_icon.png' AS relation_img_url ,
		se.procedure_id AS relation_code , 
		se.procedure_name AS relation_code_name , 
		se.price AS relation_price ,
		se.create_time , 
		se.update_time ,
		1 AS type
	FROM service_info AS se
	LEFT JOIN backstage_user_info AS us ON se.create_user_id = us.manager_id
	WHERE se.`status` = 2 AND se.in_use = 1
	UNION ALL
	SELECT 
		go.id AS relation_id ,
		go.goods_name AS relation_name ,
		go.goods_desc AS relation_desc ,
		go.supplier_name AS relation_supplier , 
		go.create_user AS relation_supplier_id , 
		go.img_url AS relation_img_url , 
		'' AS relation_code , 
		'' AS relation_code_name , 
		go.price AS relation_price ,
		go.create_time , 
		go.update_time ,
		0 AS type
	FROM goods_info AS go WHERE go.in_use = 1
  </sql>
  
  <!-- 查询条件 -->
  <sql id="Relation_Where_Clause">
  	<if test="keywordsIdList != null and keywordsIdList != ''" >
		AND ke.id = #{keywordsIdList,jdbcType=VARCHAR}
	</if>
	<if test="keywordsName != null and keywordsName != ''" >
		AND ke.`name` = #{keywordsName,jdbcType=VARCHAR}
	</if>
	<if test="keywordsNameList != null and keywordsNameList.size() > 0"  >
		AND ke.`name` in 
		<foreach item="item" index="index" collection="keywordsNameList" open="(" separator="," close=")">
	    	#{item}
	    </foreach>
	</if>
  </sql>
  
  <!-- 根据关键字查询 商品&服务 -->
  <select id="getRelationByKeywords" parameterType="com.semioe.api.vo.ServiceInfoVO" resultMap="RelationResultMap" >
  	SELECT DISTINCT re.* FROM 
	(
		<include refid="Service_Goods_Union_SQL" />	
	) AS re 
	LEFT JOIN keywords_rel AS ker ON re.relation_id = ker.relation_id AND ker.type = re.type
	LEFT JOIN keywords AS ke ON ker.keywords_id = ke.id
	WHERE 1=1 
	<include refid="Relation_Where_Clause" />	
	ORDER BY re.update_time DESC , re.create_time DESC
	<if test="currentResult != null and currentResult >= 0 and showCount != null and showCount > 0 ">
    	limit #{currentResult,jdbcType=INTEGER},#{showCount,jdbcType=INTEGER}
    </if>
  </select>
  
  <!-- 统计 商品&服务 数量 -->
  <select id="countRelationByKeywords" parameterType="com.semioe.api.vo.ServiceInfoVO" resultType="java.lang.Long" >
  	SELECT COUNT( DISTINCT re.relation_id ) FROM 
	(
		<include refid="Service_Goods_Union_SQL" />	
	) AS re 
	LEFT JOIN keywords_rel AS ker ON re.relation_id = ker.relation_id AND ker.type = re.type
	LEFT JOIN keywords AS ke ON ker.keywords_id = ke.id
	WHERE 1=1 
	<include refid="Relation_Where_Clause" />	
  </select>
  
  <!-- 查询关键字 根据类型 -->
  <select id="selectKeywordsByType" parameterType="com.semioe.api.entity.Keywords" resultMap="BaseResultMap">
    select
	    <include refid="Base_Column_List" />
    from keywords
    WHERE 1=1  and in_use=1
	<if test="keyType != null and keyType != ''" >
		AND key_type = #{keyType,jdbcType=INTEGER}
	</if>
  </select>
</mapper>