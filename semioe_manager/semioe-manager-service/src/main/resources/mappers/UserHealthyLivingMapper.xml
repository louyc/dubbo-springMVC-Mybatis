<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.semioe.dubbo.dao.UserHealthyLivingMapper">
  <resultMap id="BaseResultMap" type="com.semioe.api.entity.UserHealthyLiving">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="contracted_user_id" jdbcType="INTEGER" property="contractedUserId" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="item_id" jdbcType="INTEGER" property="itemId" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="time" jdbcType="DATE" property="time" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap id="BaseResultVOMap" type="com.semioe.api.vo.UserHealthyLivingVO">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="contracted_user_id" jdbcType="INTEGER" property="contractedUserId" />
    <result column="item_name" jdbcType="VARCHAR" property="itemName" />
    <result column="item_id" jdbcType="INTEGER" property="itemId" />
    <result column="item_type" jdbcType="INTEGER" property="itemType" />
    <result column="item_type_id" jdbcType="INTEGER" property="itemTypeId" />
    <result column="desc" jdbcType="VARCHAR" property="desc" />
    <result column="time" jdbcType="DATE" property="time" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, contracted_user_id, type_id, item_id,description, time, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.semioe.api.entity.UserHealthyLivingExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_healthy_living
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from user_healthy_living
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user_healthy_living
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.semioe.api.entity.UserHealthyLivingExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user_healthy_living
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.semioe.api.entity.UserHealthyLiving">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_healthy_living (contracted_user_id, type_id, item_id, 
      description, time, create_time, update_time
      )
    values (#{contractedUserId,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, #{itemId,jdbcType=INTEGER}, 
      #{description,jdbcType=VARCHAR}, #{time,jdbcType=DATE}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.semioe.api.entity.UserHealthyLiving">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user_healthy_living
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="contractedUserId != null">
        contracted_user_id,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="itemId != null">
        item_id,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="time != null">
        time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="contractedUserId != null">
        #{contractedUserId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="itemId != null">
        #{itemId,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=DATE},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.semioe.api.entity.UserHealthyLivingExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from user_healthy_living
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_healthy_living
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.contractedUserId != null">
        contracted_user_id = #{record.contractedUserId,jdbcType=INTEGER},
      </if>
      <if test="record.typeId != null">
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.itemId != null">
        item_id = #{record.itemId,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=DATE},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_healthy_living
    set id = #{record.id,jdbcType=INTEGER},
      contracted_user_id = #{record.contractedUserId,jdbcType=INTEGER},
      type_id = #{record.typeId,jdbcType=INTEGER},
      item_id = #{record.itemId,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=DATE},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.semioe.api.entity.UserHealthyLiving">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_healthy_living
    <set>
      <if test="contractedUserId != null">
        contracted_user_id = #{contractedUserId,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="itemId != null">
        item_id = #{itemId,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=DATE},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.semioe.api.entity.UserHealthyLiving">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user_healthy_living
    set contracted_user_id = #{contractedUserId,jdbcType=INTEGER},
      type_id = #{typeId,jdbcType=INTEGER},
      item_id = #{itemId,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      time = #{time,jdbcType=DATE},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
  <select id="selectByUserId" parameterType="java.lang.Integer" resultMap="BaseResultVOMap">
 	select
	u.id, u.contracted_user_id,u.time,d.item_id,u.description as item_name,d.item_type as item_type_id,d.`desc`
	from user_healthy_living u
	left join dictionary d on u.type_id = d.item_type and u.item_id = d.item_id 
	where  u.contracted_user_id = #{userId,jdbcType=INTEGER} and u.type_id not in ('25','26','27','28')
	UNION
	select d1.id,d1.contracted_user_id,d1.time,d2.item_id,d1.description as item_name,d1.type_id as item_type_id,d2.`desc` 
	from (select h.*,d.item_id as item_type 
	from user_healthy_living h 
	left join dictionary d  on h.type_id = d.item_type
	where h.type_id in ('25','26','27','28') 
	)d1 left join dictionary d2 on d1.item_type = d2.item_type and d1.item_id = d2.item_id 
	where d1.contracted_user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByUserId" parameterType="java.lang.Integer">
    delete from user_healthy_living
    where contracted_user_id = #{userId,jdbcType=INTEGER}
  </delete>
  
   <select id="selectByUserIdAndTypeId" parameterType="com.semioe.api.vo.UserHealthyLivingVO" resultMap="BaseResultVOMap">
      select 
        id, contracted_user_id, type_id, item_id,description, time, create_time, update_time
    	from user_healthy_living
    where   type_id = #{itemTypeId,jdbcType=INTEGER} and contracted_user_id = #{contractedUserId,jdbcType=INTEGER}
  </select>
  
  <insert id="insertHealthyVOList" useGeneratedKeys="true" parameterType="java.util.List">  
    <selectKey resultType="long" keyProperty="id" order="AFTER">  
        SELECT  
        LAST_INSERT_ID()  
    </selectKey>  
     insert into user_healthy_living (contracted_user_id, type_id, item_id, 
      description, time, create_time, update_time
      )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
      (#{item.contractedUserId,jdbcType=INTEGER}, #{item.itemTypeId,jdbcType=INTEGER}, #{item.itemId,jdbcType=INTEGER}, 
      #{item.itemName,jdbcType=VARCHAR}, #{item.time,jdbcType=DATE},
       #{item.createTime,jdbcType=TIMESTAMP}, #{item.updateTime,jdbcType=TIMESTAMP}
      )
    </foreach>  
</insert>  
</mapper>